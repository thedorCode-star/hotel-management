name: Professional CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
  schedule:
    # Run security audit daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'

jobs:
  # Job 1: Code Quality & Security
  code-quality:
    name: 🔍 Code Quality & Security
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis
      
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 📦 Install dependencies
        run: |
          npm ci --audit=false
          echo "Dependencies installed successfully"
      
      - name: 🔒 Security audit
        run: |
          echo "🔍 Running security audit..."
          npm audit --audit-level moderate --json > audit-report.json || true
          echo "Security audit completed"
      
      - name: 📊 Upload security report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-audit-report
          path: audit-report.json
          retention-days: 30
      
      - name: 🧹 Run ESLint
        run: |
          echo "🧹 Running ESLint..."
          npm run lint
          echo "ESLint completed successfully"
      
      - name: 🔍 Type checking
        run: |
          echo "🔍 Running TypeScript type check..."
          npm run type-check
          echo "Type checking completed successfully"
        env:
          DATABASE_URL: "postgresql://dummy:dummy@localhost:5432/dummy"
          JWT_SECRET: "dummy-secret"
      
      - name: 📏 Code coverage analysis
        run: |
          echo "📏 Analyzing code coverage..."
          npm run test:coverage
          echo "Code coverage analysis completed"
        env:
          DATABASE_URL: "postgresql://dummy:dummy@localhost:5432/dummy"
          JWT_SECRET: "dummy-secret"
      
      - name: 📊 Upload coverage report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: coverage/
          retention-days: 30

  # Job 2: Testing Suite
  test-suite:
    name: 🧪 Comprehensive Testing
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      matrix:
        node-version: [18, 20]
        database: [postgres-15, postgres-16]
    
    services:
      postgres:
        image: postgres:${{ matrix.database }}
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db_${{ matrix.node-version }}
          POSTGRES_USER: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🟢 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      - name: 📦 Install dependencies
        run: npm ci
      
      - name: 🗄️ Generate Prisma client
        run: npm run db:generate
        env:
          DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/test_db_${{ matrix.node-version }}"
      
      - name: 🔄 Run database migrations
        run: npm run db:push
        env:
          DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/test_db_${{ matrix.node-version }}"
      
      - name: 🧪 Run test suite
        run: |
          echo "🧪 Running comprehensive test suite..."
          npm run test:ci
          echo "All tests completed successfully!"
        env:
          DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/test_db_${{ matrix.node-version }}"
          JWT_SECRET: "test-secret-${{ matrix.node-version }}"
          NODE_ENV: "test"
      
      - name: 📊 Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.node-version }}-${{ matrix.database }}
          path: |
            coverage/
            test-results/
          retention-days: 30

  # Job 3: Build & Quality Gates
  build-and-validate:
    name: 🏗️ Build & Quality Gates
    runs-on: ubuntu-latest
    needs: [code-quality, test-suite]
    timeout-minutes: 15
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 📦 Install dependencies
        run: npm ci
      
      - name: 🗄️ Generate Prisma client
        run: npm run db:generate
        env:
          DATABASE_URL: "postgresql://dummy:dummy@localhost:5432/dummy"
          JWT_SECRET: "dummy-secret"
      
      - name: 🏗️ Build application
        run: |
          echo "🏗️ Building application..."
          npm run build
          echo "Build completed successfully!"
        env:
          DATABASE_URL: "postgresql://dummy:dummy@localhost:5432/dummy"
          JWT_SECRET: "dummy-secret"
          NODE_ENV: "production"
      
      - name: 📊 Build size analysis
        run: |
          echo "📊 Analyzing build size..."
          du -sh .next/ || echo "Build size analysis completed"
      
      - name: 📦 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: .next/
          retention-days: 7

  # Job 4: Performance Testing
  performance-test:
    name: ⚡ Performance Testing
    runs-on: ubuntu-latest
    needs: [build-and-validate]
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 📦 Install dependencies
        run: npm ci
      
      - name: 🗄️ Generate Prisma client
        run: npm run db:generate
        env:
          DATABASE_URL: "postgresql://dummy:dummy@localhost:5432/dummy"
          JWT_SECRET: "dummy-secret"
      
      - name: 🏗️ Build for performance testing
        run: npm run build
        env:
          DATABASE_URL: "postgresql://dummy:dummy@localhost:5432/dummy"
          JWT_SECRET: "dummy-secret"
      
      - name: ⚡ Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            http://localhost:3000
          uploadArtifacts: true
          temporaryPublicStorage: true
          configPath: './.lighthouserc.json'

  # Job 5: Staging Deployment
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-validate, performance-test]
    if: github.ref == 'refs/heads/develop'
    environment: 
      name: staging
      url: ${{ steps.deploy.outputs.url }}
    timeout-minutes: 15
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🚀 Deploy to Vercel (Staging)
        id: deploy
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: ./
      
      - name: 🔍 Health check
        run: |
          echo "🔍 Performing health check on staging deployment..."
          sleep 30  # Wait for deployment to stabilize
          curl -f ${{ steps.deploy.outputs.url }}/health || echo "Health check failed"
      
      - name: 📱 Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Staging deployment successful: ${{ steps.deploy.outputs.url }}"
          else
            echo "❌ Staging deployment failed"
          fi

  # Job 6: Production Deployment
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-validate, performance-test]
    if: github.ref == 'refs/heads/main'
    environment: 
      name: production
      url: ${{ steps.deploy.outputs.url }}
    timeout-minutes: 20
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🔒 Production deployment approval
        run: |
          echo "🔒 Production deployment requires manual approval"
          echo "This deployment will affect live users"
      
      - name: 🚀 Deploy to Vercel (Production)
        id: deploy
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: ./
      
      - name: 🔍 Production health check
        run: |
          echo "🔍 Performing production health check..."
          sleep 45  # Wait longer for production deployment
          curl -f ${{ steps.deploy.outputs.url }}/health || echo "Health check failed"
      
      - name: 📱 Production deployment notification
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "🎉 Production deployment successful: ${{ steps.deploy.outputs.url }}"
            echo "🚀 Your app is now live in production!"
          else
            echo "💥 Production deployment failed - immediate attention required!"
          fi

  # Job 7: Post-Deployment Validation
  post-deployment:
    name: ✅ Post-Deployment Validation
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🔍 Validate staging deployment
        if: needs.deploy-staging.result == 'success'
        run: |
          echo "✅ Staging deployment validation passed"
          echo "Ready for production deployment"
      
      - name: 🔍 Validate production deployment
        if: needs.deploy-production.result == 'success'
        run: |
          echo "🎉 Production deployment validation passed"
          echo "Application is successfully deployed and running"
      
      - name: 📊 Generate deployment report
        if: always()
        run: |
          echo "📊 Deployment Summary:"
          echo "Staging: ${{ needs.deploy-staging.result }}"
          echo "Production: ${{ needs.deploy-production.result }}"
          echo "All jobs completed" 